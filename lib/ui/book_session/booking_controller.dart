// lib/ui/booking/booking_controller.dart
import 'dart:convert';

import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:physio_connect/model/doctor_model.dart';
import 'package:physio_connect/route/route_module.dart';
import 'package:razorpay_flutter/razorpay_flutter.dart';
import 'package:uuid/uuid.dart';

import '../../model/bookings_model.dart';
import '../../model/session_type_model.dart';
import '../../model/time_slots_model.dart';
import '../../model/user_model_supabase.dart';
import '../../supabase/supabase_controller.dart';
import '../../utils/app_shared_preference.dart';

class BookingController extends GetxController {
  static BookingController get to => Get.find();

  BookingController();
  SupabaseController supabaseController =
      SupabaseController.to;

  final isLoading = false.obs;

  // Session Type
  final selectedSessionType = Rx<SessionTypeModel?>(null);
  final sessionTypes = <SessionTypeModel>[].obs;
  // Time slots data
  final selectedTimeSlot = Rx<TimeSlotModel?>(null);
  final timeSlots = <TimeSlotModel>[].obs;

  final selectedDate = DateTime.now().obs;
  // TODO Handle.
  final razorpayPaymentId = ''.obs;

  UserModelSupabase? userModelSupabase;
  @override
  Future<void> onInit() async {
    super.onInit();
    userModelSupabase = await getUserModel();
    getSessionTypesMaster();
    getTimeSlotsMaster();
  }

  // Load master data
  void getSessionTypesMaster() async {
    isLoading.value = true;
    sessionTypes.clear();
    var response = await supabaseController.getSessionTypeMaster();
    sessionTypes.addAll(response);
    isLoading.value = false;
  }

  // Load master data
  void getTimeSlotsMaster() async {
    isLoading.value = true;
    selectedTimeSlot.value = null;
    timeSlots.clear();
    var response = await supabaseController.getTimeSlotsMaster();
    timeSlots.addAll(response);
    isLoading.value = false;
  }

  // TODO: Doctor object need to pass
  void createAppointment(PaymentSuccessResponse paymentResponse) async {
    var doctorModel = await DoctorModel.getFromSecureStorage();
    var doctorJson = jsonEncode(doctorModel?.toJson() ?? {});
    var timeslotJson = jsonEncode(selectedTimeSlot.value?.toJson() ?? {});
    var sessionTypeJson = jsonEncode(selectedSessionType.value?.toJson() ?? {});

    isLoading.value = true;
    var bookingsModel = BookingsModel(
      id: 0, // This will be auto-generated by the database
      userId: userModelSupabase?.id ?? 0,
      timeSlotId: selectedTimeSlot.value?.id ?? 1, // Replace with actual time slot ID
      timeSlotJson: timeslotJson, // Replace with actual time slot ID
      doctorId: doctorModel?.id ?? 1, // Replace with actual doctor ID
      doctorJson: doctorJson, // Replace with actual doctor ID
      sessionTypeId: selectedSessionType.value?.id ?? 1,
      sessionTypeJson: sessionTypeJson,
      paymentId: paymentResponse.paymentId!,
      orderId: paymentResponse.orderId,
      signature: paymentResponse.signature,
      bookingDate: DateFormat('yyyy-MM-dd').format(selectedDate.value),
      createdAt: DateTime.now().toString(),
    );
    var response = await supabaseController.createNewBooking(bookingsModel, doctorModel?.userId ?? 1);
    isLoading.value = false;

    // In a real app, this would create the appointment in your database
    final appointmentId = Uuid().v4();

    // Example implementation:
    // final appointment = booking_model.dart(
    //   appointmentId: appointmentId,
    //   userId: 'current-user-id', // Get from auth service
    //   therapistId: 'assigned-therapist-id',
    //   sessionTypeId: selectedSessionType.value!.sessionTypeId,
    //   date: DateFormat('yyyy-MM-dd').format(selectedDate.value),
    //   startTime: selectedTimeSlot.value,
    //   endTime: calculateEndTime(selectedTimeSlot.value, selectedSessionType.value!.durationMinutes),
    //   status: 'booked',
    //   createdAt: DateTime.now(),
    // );

    // Create payment record
    // final payment = PaymentModel(
    //   paymentId: Uuid().v4(),
    //   appointmentId: appointmentId,
    //   amount: selectedSessionType.value!.price,
    //   razorpayPaymentId: razorpayPaymentId.value,
    //   status: 'completed',
    //   timestamp: DateTime.now(),
    // );

    // Save to database
    // databaseService.saveAppointment(appointment);
    // databaseService.savePayment(payment);

    print('Appointment created with ID: $appointmentId');
  }

  String calculateEndTime(String startTime, int durationMinutes) {
    final parts = startTime.split(':');
    final hour = int.parse(parts[0]);
    final minute = int.parse(parts[1]);

    final startDateTime = DateTime(2023, 1, 1, hour, minute);
    final endDateTime = startDateTime.add(Duration(minutes: durationMinutes));

    return '${endDateTime.hour.toString().padLeft(2, '0')}:${endDateTime.minute.toString().padLeft(2, '0')}';
  }
}